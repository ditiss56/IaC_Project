AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with public and private subnets and EC2 instances'

Parameters:
  VpcCIDR:
    Description: 'CIDR for VPC'
    Type: 'String'
    Default: '10.0.0.0/16'

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref 'VpcCIDR'

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: '10.0.1.0/24'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: '10.0.2.0/24'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: '10.0.3.0/24'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref 'VPC'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: 'AttachGateway'
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref 'PublicSubnet'
      RouteTableId: !Ref 'PublicRouteTable'

  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH, HTTP, and HTTPS access'
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'

  PublicEC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref 'PublicSubnet'
      ImageId: 'ami-0abc123def456xyz'
      InstanceType: 't2.micro'
      SecurityGroupIds:
        - !GetAtt 'EC2SecurityGroup.GroupId'

  PrivateEC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      ImageId: 'ami-0abc123def456xyz'
      InstanceType: 't2.micro'
      SecurityGroupIds:
        - !GetAtt 'EC2SecurityGroup.GroupId'

  PrivateEC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      ImageId: 'ami-0abc123def456xyz'
      InstanceType: 't2.micro'
      SecurityGroupIds:
        - !GetAtt 'EC2SecurityGroup.GroupId'
